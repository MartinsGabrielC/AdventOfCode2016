import sys

data = '''LDUDDRUDRRURRRRDRUUDULDLULRRLLLUDDULRDLDDLRULLDDLRUURRLDUDDDDLUULUUDDDDLLLLLULLRURDRLRLRLLURDLLDDUULUUUUDLULLRLUUDDLRDRRURRLURRLLLRRDLRUDURRLRRRLULRDLUDRDRLUDDUUULDDDDDURLDULLRDDRRUDDDDRRURRULUDDLLRRDRURDLLLLLUUUDLULURLULLDRLRRDDLUDURUDRLRURURLRRDDLDUULURULRRLLLDRURDULRDUURRRLDLDUDDRLURRDRDRRLDLRRRLRURDRLDRUDLURRUURDLDRULULURRLDLLLUURRULUDDDRLDDUDDDRRLRDUDRUUDDULRDDULDDURULUDLUDRUDDDLRRRRRDLULDRLRRRRUULDUUDRRLURDLLUUDUDDDLUUURDRUULRURULRLLDDLLUDLURRLDRLDDDLULULLURLULRDLDRDDDLRDUDUURUUULDLLRDRUDRDURUUDDLRRRRLLLUULURRURLLDDLDDD
DRURURLLUURRRULURRLRULLLURDULRLRRRLRUURRLRRURRRRUURRRLUDRDUDLUUDULURRLDLULURRLDURLUUDLDUDRUURDDRDLLLDDRDDLUUDRDUDDRRDLDUDRLDDDRLLDDLUDRULRLLURLDLURRDRUDUDLDLULLLRDLLRRDULLDRURRDLDRURDURDULUUURURDLUDRRURLRRLDULRRDURRDRDDULLDRRRLDRRURRRRUURDRLLLRRULLUDUDRRDDRURLULLUUDDRLDRRDUDLULUUDRDDDDLRLRULRLRLLDLLRRDDLDRDURRULLRLRRLULRULDDDRDRULDRUUDURDLLRDRURDRLRDDUDLLRUDLURURRULLUDRDRDURLLLDDDRDRURRDDRLRRRDLLDDLDURUULURULRLULRLLURLUDULDRRDDLRDLRRLRLLULLDDDRDRU
URUUDUDRDDRDRRRDLLUDRUDRUUUURDRRDUDUULDUDLLUDRRUDLLRDLLULULDRRDDULDRLDLDDULLDDRDDDLRLLDLLRDUUDUURLUDURDRRRRLRRLDRRUULLDLDLRDURULRURULRRDRRDDUUURDURLLDDUUDLRLDURULURRRDRRUUUDRDDLRLRRLLULUDDRRLRRRRLRDRUDDUULULRRURUURURRLRUDLRRUUURUULLULULRRDDULDRRLLLDLUDRRRLLRDLLRLDUDDRRULULUDLURLDRDRRLULLRRDRDLUURLDDURRLDRLURULDLDRDLURRDRLUUDRUULLDRDURLLDLRUDDULLLLDLDDDLURDDUDUDDRLRDDUDDURURLULLRLUDRDDUDDLDRUURLDLUUURDUULRULLDDDURULDDLLD
LRRLLRURUURRDLURRULDDDLURDUURLLDLRRRRULUUDDLULLDLLRDLUDUULLUDRLLDRULDDURURDUUULRUDRLLRDDDURLRDRRURDDRUDDRRULULLLDLRLULLDLLDRLLLUDLRURLDULRDDRDLDRRDLUUDDLURDLURLUDLRDLDUURLRRUULDLURULUURULLURLDDURRURDRLUULLRRLLLDDDURLURUURLLLLDLLLUDLDLRDULUULRRLUUUUDLURRURRULULULRURDDRRRRDRUDRURDUDDDDUDLURURRDRRDRUDRLDLDDDLURRRURRUDLDURDRLDLDLDDUDURLUDUUDRULLRLLUUDDUURRRUDURDRRUURLUDRRUDLUDDRUUDLULDLLDLRUUDUULLDULRRLDRUDRRDRLUUDDRUDDLLULRLULLDLDUULLDRUUDDUDLLLLDLDDLDLURLDLRUUDDUULLUDUUDRUDLRDDRDLDRUUDUDLLDUURRRLLLLRLLRLLRLUUDULLRLURDLLRUUDRULLULRDRDRRULRDLUDDURRRRURLLRDRLLDRUUULDUDDLRDRD
DDLRRULRDURDURULLLLRLDDRDDRLLURLRDLULUDURRLUDLDUDRDULDDULURDRURLLDRRLDURRLUULLRUUDUUDLDDLRUUDRRDDRLURDRUDRRRDRUUDDRLLUURLURUDLLRRDRDLUUDLUDURUUDDUULUURLUDLLDDULLUURDDRDLLDRLLDDDRRDLDULLURRLDLRRRLRRURUUDRLURURUULDURUDRRLUDUDLRUDDUDDRLLLULUDULRURDRLUURRRRDLLRDRURRRUURULRUDULDULULUULULLURDUDUDRLDULDRDDULRULDLURLRLDDDDDDULDRURRRRDLLRUDDRDDLUUDUDDRLLRLDLUDRUDULDDDRLLLLURURLDLUUULRRRUDLLULUUULLDLRLDLLRLRDLDULLRLUDDDRDRDDLULUUR'''
data = data.split(sep='\n')

inic = []
inic.append([2,2])

def addToData(dir,val):

    if(dir == 0):
        for i in range(val):
            inic.append(list(inic[-1]))
            if(inic[-1][0] == 0 or inic[-1][0] == 4):
                    break;
            elif(inic[-1][0] == 1 or inic[-1][0] == 3):
                inic[-1][1]=(inic[-1][1]+(1 if inic[-1][1] < 3 else 0))
            elif(inic[-1][0] == 2):
                inic[-1][1]=(inic[-1][1]+(1 if inic[-1][1] < 4 else 0))
    elif(dir == 1):
        for i in range(val):
            inic.append(list(inic[-1]))
            if(inic[-1][1] == 0 or inic[-1][1] == 4):
                    break;
            elif(inic[-1][1] == 1 or inic[-1][1] == 3):
                inic[-1][0]=(inic[-1][0]+(1 if inic[-1][0] < 3 else 0))
            elif(inic[-1][1] == 2):
                inic[-1][0]=(inic[-1][0]+(1 if inic[-1][0] < 4 else 0))
    elif(dir == 2):
        for i in range(val):
            inic.append(list(inic[-1]))
            if(inic[-1][0] == 0 or inic[-1][0] == 4):
                    break;
            elif(inic[-1][0] == 1 or inic[-1][0] == 3):
                inic[-1][1]=(inic[-1][1]-(1 if inic[-1][1] > 1 else 0))
            elif(inic[-1][0] == 2):
                inic[-1][1]=(inic[-1][1]-(1 if inic[-1][1] > 0 else 0))
    elif(dir == 3):
        for i in range(val):
            inic.append(list(inic[-1]))
            if(inic[-1][1] == 0 or inic[-1][1] == 4):
                    break;
            elif(inic[-1][1] == 1 or inic[-1][1] == 3):
                inic[-1][0]=(inic[-1][0]-(1 if inic[-1][0] > 1 else 0))
            elif(inic[-1][1] == 2):
                inic[-1][0]=(inic[-1][0]-(1 if inic[-1][0] > 0 else 0))
    else:
        print("Deu merda")
        sys.exit(1)

for info in data:
    #inic.append([1,1])
    for letter in info:
        if letter == "L":
            addToData(3, 1)
        elif letter == "R":
            addToData(1, 1)
        elif letter == "U":
            addToData(0, 1)
        elif letter == "D":
            addToData(2, 1)
    print(inic[-1])

# print(data)
# dist=abs(inic[-1][0])+abs(inic[-1][1])
# for coord in range(len(inic)):
#     if inic[coord] in inic[:coord]:
#         print(inic[coord])
#         print(abs(inic[coord][0])+abs(inic[coord][1]))
#         break
# print(inic)
# print(dist)
